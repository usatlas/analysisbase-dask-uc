apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-conf
data:
  nginx.conf: |
    user nginx;
    worker_processes  2;
    error_log  /var/log/nginx/error.log;
    events {
      worker_connections  10240;
    }
    http {
       map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
       }

      server {
          listen       8080;
          server_name  localhost;
          location ^~ / {
             if ( $request_uri ~ ^/(.*)/.*$ ) {
                proxy_pass http://$1:8787;
                
            }
            # proxy_pass http://dask-ivukotic-fb1cf4c5-5:8787;
            proxy_set_header Host $http_host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_http_version 1.1;
            proxy_redirect off;
            proxy_buffering off;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            proxy_read_timeout 86400;
          }
        }
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: n4dask
  labels:
    app: nginx
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
        - name: nginx
          image: nginx:latest
          ports:
            - containerPort: 8080
          volumeMounts:
            - name: nginx-conf
              mountPath: /etc/nginx # mount nginx-conf volume to /etc/nginx
          resources:
            requests:
              cpu: "1"
              memory: "1Gi"
            limits:
              cpu: "2"
              memory: "2Gi"
      volumes:
        - name: nginx-conf
          configMap:
            name: nginx-conf
---
apiVersion: v1
kind: Service
metadata:
  name: n4dask
spec:
  type: NodePort
  ports:
    - port: 80
      targetPort: 8080
      nodePort: 30001
  selector:
    app: nginx
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: n4dask
  namespace: af-jupyter
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    kubernetes.io/ingress.class: nginx
spec:
  tls:
    - hosts:
        - "n4dask.af.uchicago.edu"
      secretName: nginx-tls
  rules:
    - host: n4dask.af.uchicago.edu
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: n4dask
                port:
                  number: 80
